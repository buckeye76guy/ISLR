View(DT)
View(mtcars)
DT[, c("mpgSum", "owner") := .(cumcum(mpg), "Josiah")]
DT[, c("mpgSum", "owner") := list(cumcum(mpg), "Josiah")]
DT[, c("mpgSum", "owner") := .(cumsum(mpg), "Josiah")]
DT[, c("mpgSum", "owner") := list(cumsum(mpg), "Josiah")]
View(DT)
dim(DT)
DT[, .N, by = am]
DT[, .N, by = "am"]
DT[, .N, by = c("am", "cyl")]
View(DT)
library(rpart)
install.packages("caret")
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
View(Sonar)
?Sonar
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class,)
inTrain <- createDataPartition(y = Sonar$Class, p = .75, list = FALSE)
str(inTrain)
View(Sonar)
training <- Sonar[inTrain,]
testing <- Sonar[-inTrain,]
nrow(training)
nrow(testing)
()
plsFit <- train(Class ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"))
str(plsFit)
summary(plsFit)
63245986 + 39088169
?args
args(mean)
sqrt(90)
sqrt(5)
4-sqrt(5)
3-sqrt(5)
5 - sqrt(5)
sqrt(6)
6 - sqrt(6)
5 - sqrt(6)
6 - 2*sqrt(6)
4 - sqrt(6)
sqrt(6/5)
sqrt(5/6)
sqrt(5)
sqrt(6)
2.45 * 0.91
sqrt(100000000)
sqrt(5)
2 * sqrt(5)
4 - sqrt(5)
4 % 2
4 %% 2
27301 %% 101
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
ceil(sqrt(10))
ceiling
ceiling(sqrt(10))
sqrt(10)
floor(2*sqrt(10))
4 + sqrt(10)
7 - sqrt(10)
8 - sqrt(10)
9 - sqrt(10)
2*sqrt(10)
sqrt(10)
4 - sqrt(10)
ceiling(sqrt(n))
ceiling(sqrt(10))
ceiling(2*sqrt(10))
sqrt(10) - floor(sqrt(10))
ceiling(sqrt(10)) - sqrt(10)
a = ceiling(sqrt(10)) - sqrt(10)
5 + a
5 + a - 1
5 + a - sqrt(10)
a * 2
ceiling(2*a) - a
12.11 % 1
12.11 %% 1
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
g(4,11)
g(4,12)
g(4,13)
g(4,10)
source('~/Coursera/quick.r')
g(4,11)
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
g(4,10)
debugSource('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
g(4,9)
3*sqrt(10)
g(sqrt(10),9)
floor(9 - 2*sqrt(10))
9 - floor(9 - 2*sqrt(10))
9 - floor(9 - 2*sqrt(10))
10 - floor(10 - 2*sqrt(10))
11 - floor(11 - 2*sqrt(10))
g(sqrt(10),9)
floor(9 - 2*sqrt(10))
x = 9
a = sqrt(10)
floor(x - 2*a) + 2
floor(x - 2*a)
g(4,11)
x = 11
a = 4
floor(x - 2*a)
sqrt(1000)
3 * sqrt(1000)
sqrt(1000000000)
3 * sqrt(1000000000)
4 * sqrt(1000000000)
sqrt(90)
90 / sqrt(90)
39/10
sqrt(10010000)
10*sqrt(10010000)
5*sqrt(10010000)
sqrt(10)
sqrt(90)
source('~/Coursera/isprime.r')
a = 10000000:10010000
isprime(a)
lengthwhich(isprime(a))
length(which(isprime(a)))
(which(isprime(a)))[1]
a[20]
source('~/GitHub/R_Math/Gaussian_rm_cols.R')
attach(mtcars)
mpg
?attach
am
detach(mtcars)
mpg
?mkdir
library(SoDA)
downames
dowNames
?eval
{xx <- pi; xx^2}
eval(quote("2+3"))
eval(quote(2+3))
q()
p = 120
a = 20
b = 48
p^2 -2*p*(a+b) + 2*a*b
20^2
48^2
52^2
120^2
120/3
is.numeric(2)
is.numeric("2")
as.numeric("l")
as.numeric("2")
a <- readline()
a == "q"
?is.na
source('~/Coursera/inputs.r')
?prompt
?readline
source('~/Coursera/inputs.r')
f()
?pnorm
pnorm(c(550,675), 500,100)
a <- pnorm(c(550,675), 500,100)
a[2] - a[1]
source('~/Coursera/projecteuler.r')
power(2, 10)
power
?write
write(power(632382, 518061), "bgnber.txt")
a <- readLines("bases.txt")
tail(a, 1)
?log
source('~/Coursera/projecteuler.r')
View(a)
?read.csv
?name
names(a)
source('~/Coursera/projecteuler.r')
View(a)
class(a[1,1])
head(a[[1]])
log(10)
log(1)
log(exp(1))
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
a[2,2] * log(a[2,1])/log(max_base)
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
a <- power(2, 7830457)
write(power(2, 7830457), "bgnber.txt")
?sample
?set.seed
source('~/Coursera/quick.r')
?matrix
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
?setdiff
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
c
source('~/Coursera/quick.r')
c
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
c
paste("var",1,sep = "") = 2
paste("var",1,sep = "")
eval(paste("var",1,sep = ""))
length(a)
12 % 2
12 %% 2
12 %% 4
12 %% 5
?%%
?(%%)
%%
?data.frame
matrix(nrow = 4, ncol = 10)
data.frame(matrix(nrow = 4, ncol = 10))
names(data.frame(matrix(nrow = 4, ncol = 10)))
a[1]
data.frame(matrix(nrow = 4, ncol = 10))[[1]]
source('~/Coursera/quick.r')
vec = c("lola","ahem","kpoto","goun")
randomizeClass(vec)
source('~/Coursera/quick.r')
randomizeClass(vec)
source('~/Coursera/quick.r')
randomizeClass(vec)
vec = c("lola","ahem","kpoto","goun", "kpaze", "dogoun", "loas", "joko")
randomizeClass(vec)
source('~/Coursera/quick.r')
randomizeClass(vec)
vec = c("lola","ahem","kpoto","goun", "kpaze", "dogoun", "loas")
randomizeClass(vec)
vec = c("lola","ahem","kpoto","goun", "kpaze", "dogoun")
randomizeClass(vec)
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
vec = c("lola","ahem","kpoto","goun", "kpaze", "dogoun", "loas", "joko","koko","edsh")
randomizeClass(vec)
vec = c("lola","ahem","kpoto","goun", "kpaze", "dogoun", "loas", "joko","koko","edsh","lkjd","jhkd","kld")
randomizeClass(vec)
source('~/Coursera/quick.r')
randomizeClass(vec)
?union
source('~/Coursera/quick.r')
randomizeClass(vec)
vec
source('~/Coursera/quick.r')
source('~/GitHub/R_Math/RandomizeClassList.r')
de(A)
A = matrix(c(-1,0,0,0,-1,0,0,0,-1), 3,3)
A
B = A
de(B)
B
de(B)
de(B)
B[1,] <- A[3,]
B[2,] <- A[1,]
B[3,] <- A[2,]
B
A*B
det(A+B)
det(B)
det(A)
B = A
B[1,] <- A[3,]
B[3,] <- A[1,]
det(B)
A*B
det(A+B)
det(A*B)
det(A**B)
A**B
A
B
A %*% B
det(A %*% B)
A
B
source('~/GitHub/R_Math/RandomizeClassList.r')
View(Class_Groups)
rm(A)
rm(B)
A = t(Class_Groups)
View(A)
?write
?write.lines
?write.Lines
write(A,"groups.txt")
write.csv(A,"groups.csv", header = F)
?write.csv
write.table(A,"groups.csv", header = F)
write.table(A,"groups.csv")
write.table(Class_Groups,"groups.csv")
write.table(A,"groups.txt")
write(A,"groups.txt")
write(Class_Groups,"groups.txt")
View(Class_Groups)
write(as.matrix(Class_Groups),"groups.txt")
View(Class_Groups)
x <- 1:10
norm(x,type = "I")
A = matrix(1:20,4,5)
norm(A,type = "I")
A
B = A
B[4,] <- -B[4,]
B
norm(B, "I")
mean(1:10)
mymean <- function(x){}
mymean <- function(x){}
mymean <- function(x){
(x[1]+x[2])/length(x) + mymean(x[3:])
x <- 1:10
x[3:]
x[-c(1,2)]
mymean <- function(x){
(x[1]+x[2])/length(x) + mymean(x[-c(1,2)])
}
mymean(x)
mymean <- function(x){
if(length(x) == 0){}
source('~/Coursera/inputs.r')
mymean(x)
source('~/Coursera/inputs.r')
mymean(x)
source('~/Coursera/inputs.r')
choose(7,3)
choose(9,2)
x = c(2,3,5,6)
y <- c(1.1,2.3,3.8,5.2)
lm(y~x)
lm(x~y)
y <- c(2,4,5)
x1 <- c(1,3,5)
x2 <- c(2,2,6)
x3 <- c(5,1,4)
lm(y~x1+x2+x3)
lm(y~x1+x2+x3 - 1)
library(ggplot2)
library(jpeg)
?readJPEG
X = readJPEG("b.jpg")
df <- read.csv("viftrial.csv")
View(df)
fit <- lm(Y ~ X1 + X2, data = df)
fit
vif(fit)
library(car)
fit <- lm(Y ~ X1 + X2, data = df)
fit
vif(fit)
fit <- lm(Y ~ X1 + I(X2^2), data = df)
fit
vif(fit)
VIF(fit)
library(fmsb)
install.packages("fmsb")
fit <- lm(Y ~ X1 + I(X2^2), data = df)
fit <- lm(Y ~ X1 + X2, data = df)
View(df)
fit
library(fmsb)
VIF(fit)
A = matrix(c(1:4), 2,2)
A
eigen(A)
norm(A,"2")
sqrt(10) + sqrt(20)
x = 1:10
norm(x,"2")
sqrt(eigen(t(x)%*%x))
t(x) %*% x
sqrt(eigen(x%*%t(x)))
x%*%t(x)
A = x%*%t(x)
norm(x,"2")
?eigen
eigen(A,F)
eigen(A,FALSE)
x
eigen(A,FALSE,TRUE)
max(eigen(A,FALSE,TRUE)$Values)
norm(x,"2")
x
t(x)
t(x) %*% x
dim(x)
size(x)
sqrt(1:9)
norm(1:9,"2")
sqrt(285)
library(qdap)
loadNamespace("rJava")
dirname(this$RuntimeLib)
library(ISLR)
install.packages("ISLR")
library(ISLR)
data("Auto")
?Auto
?legend
xy.coords(stats::fit(c(1:9)), NULL)
xy.coords(stats::fft(c(1:9)), NULL)
fft(c(1:9))
xy.coords(1:3,4:6)
xy.coords(1:3,1:2,recycle = T)
plot()
plot(NULL,NULL)
legend("topright", legend = "lol")
?llegend
?legend
load("C:/Users/Josiah Hounyo/Desktop/ISLR/ch3_applied.RData")
plot(2:14, Probs, ylab = "F-statistics", xlab = "variables: zn to medv") # see the index of the
plot(coefs$Beta_1,coef(lm_fit_15)[-1], col=1:13, xlab = "Univariate", ylab = "Multivariate")
legend(x=c(0,25), y=c(-10,-2), legend = names(Boston)[2:14], col = 1:13)
plot(coefs$Beta_1,coef(lm_fit_15)[-1], col=1:13, xlab = "Univariate", ylab = "Multivariate")
legend(x=c(0,25), y=c(-10,-2), legend = names(Boston)[2:14], col = 1:13, ncol = 3)
plot(coefs$Beta_1,coef(lm_fit_15)[-1], col=1:13, xlab = "Univariate", ylab = "Multivariate")
legend(x=c(0,25), y=c(-10,-2), legend = names(Boston)[2:14], col = 1:13, ncol = 3, cex = .7,
pt.cex = 1, pch = 1)
plot(coefs$Beta_1,coef(lm_fit_15)[-1], col=1:13, xlab = "Univariate", ylab = "Multivariate")
legend(x=c(0,25), y=c(-10,-2), legend = names(Boston)[2:14], col = 1:13, ncol = 3, cex = .7,
pt.cex = 1, pch = 1)
View(coefs)
?boot::cv.glm
df <- matrix(1:20,4)
df
?matrix
sapply(df, function(i)mean())
sapply(df, function(i) mean(i))
sapply(df,mean)
?sapply
sapply(df,mean())
sapply(df,mean)
apply(df, 1, mean)
df
apply(df, 2, mean)
sapply(1:10, function(i) i+2)
sapply(1:10, function() i+2)
log(5)
log(7)
log10(7)
log10(8)
log(8)
log10(10)
log10(11)
?ISLR::income
?ISLR::credit
?ISLR::Credit
library(ISLR)
Credit
?`datasets-package`
?data
data(package = ISLR)
data(package = "ISLR")
names(Default)
exp(-20)
exp(-2)
getwd()
setwd("../../Desktop/ISLR")
